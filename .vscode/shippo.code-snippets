{
	// Place your Shipposerver workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "Query & Mutation GraphqlObject": {
    "scope": "javascript",
    "prefix": ["gq", "gm", "queries", "mutations"],
    "body": [
      "const {",
      "\tGraphQLString,",
      "\tGraphQLInt,",
      "\tGraphQLBoolean,",
      "\tGraphQLObjectType,",
      "\tGraphQLNonNull,",
      "} = require('graphql')",
      "const ${1:Name}Controller = require('../../../controllers/$1Controller')",
      "const type = require('./type')",
      "\nmodule.exports = new GraphQLObjectType({",
      "\tname: '${2|RootQueryType,RootMutationsType|}',",
      "\tfields: {",
      "\t\t${3:apiName}: {",
      "\t\t\ttype,",
      "\t\t\targs: {",
      "\t\t\t\t${4:name}: { type: ${5|GraphQLString,GraphQLInt,GraphQLBoolean,new GraphQLNonNull(GraphQLString),new GraphQLNonNull(GraphQLInt),new GraphQLNonNull(GraphQLBoolean)|} }$6",
      "\t\t\t},",
      "\t\t\tresolve: $1Controller.$3.bind($1Controller)",
      "\t\t}$0",
      "\t}",
      "})\n"
    ]
  },
  "Query & Mutation GraphqlObject args&?/type types": {
    "scope": "javascript",
    "prefix": ["gat", "gtt"],
    "body": [
      ",\n${1:name}: { type: ${2|GraphQLString,GraphQLInt,GraphQLBoolean,new GraphQLNonNull(GraphQLString),new GraphQLNonNull(GraphQLInt),new GraphQLNonNull(GraphQLBoolean)|} }$3",
    ]
  },
  "Query & Mutation GraphqlObject fields": {
    "scope": "javascript",
    "prefix": "gaf",
    "body": [
      "${1:apiName}: {",
      "\ttype,",
      "\targs: {",
      "\t\t${3:name}: { type: ${4|GraphQLString,GraphQLInt,GraphQLBoolean,new GraphQLNonNull(GraphQLString),new GraphQLNonNull(GraphQLInt),new GraphQLNonNull(GraphQLBoolean)|} }$5",
      "\t},",
      "\tresolve: ${2:Name}Controller.$1.bind($2Controller)",
      "}$0"
    ]
  },
  "Graphql Schema": {
    "scope": "javascript",
    "prefix": "schema",
    "body": [
      "const { GraphQLSchema } = require('graphql')",
      "\nconst mutation = require('../model/${TM_FILENAME/(.*)\\..+$/$1/}/mutations')",
      "const query = require('../model/${TM_FILENAME/(.*)\\..+$/$1/}/queries')",
      "\nconst schema = new GraphQLSchema({",
      "\tquery,",
      "\tmutation",
      "})",
      "\nmodule.exports = schema\n",
    ]
  },
  "Shippo Controller": {
    "scope": "javascript",
    "prefix": "controller",
    "body": [
      "const msg = require('../util/message')",
      "const { log } = require('../util/Logger')",
      "const { basename } = require('path')",
      "const Validator = require('../util/Validator')",
      "\nclass ${TM_FILENAME/(.*)\\..+$/$1/} {",
      "\t/**",
      "\t * ${2:methodName} - ${3:description}",
      "\t * @param {null} _",
      "\t * @param {{ ${4:key: value} }} fields",
      "\t * @returns {{ status: number, message: string, responseCode: number$5 }}",
      "\t */",
      "\tstatic async $2 (_, fields) {",
      "\t\tlog({ filename: basename(__filename), method: '$2', action: 'request', log: fields })",
      "\n\t\t$LINE_COMMENT Check whether all the fields mentioned in the array are present in fields parameter",
      "\t\tconst validationResponse = Validator.validateFields(fields, [$6])",
      "\t\tif (validationResponse.status !== 200) return validationResponse",
      "\n\t\ttry {",
      "\t\t\t${0:$LINE_COMMENT Happy Coding...}",
      "\t\t} catch (err) {",
      "\t\t\tlog({ filename: basename(__filename), method: '$2', action: 'catch error', log: err })",
      "\t\t\treturn msg.dynamic(400, 101)",
      "\t\t}",
      "\t}",
      "}",
      "\nmodule.exports = ${TM_FILENAME/(.*)\\..+$/$1/}\n"
    ]
  },
  "Shippo Controller Method": {
    "scope": "javascript",
    "prefix": "method",
    "body": [
      "/**",
      " * ${1:methodName} - ${2:description}",
      " * @param {null} _",
      " * @param {{ ${3:key: value} }} fields",
      " * @returns {{ status: number, message: string, responseCode: number$4 }}",
      " */",
      "static async $1 (_, fields) {",
      "\tlog({ filename: basename(__filename), method: '$1', action: 'request', log: fields })",
      "\n\t$LINE_COMMENT Check whether all the fields mentioned in the array are present in fields parameter",
      "\tconst validationResponse = Validator.validateFields(fields, [$5])",
      "\tif (validationResponse.status !== 200) return validationResponse",
      "\n\ttry {",
      "\t\t${0:$LINE_COMMENT Happy Coding...}",
      "\t} catch (err) {",
      "\t\tlog({ filename: basename(__filename), method: '$1', action: 'catch error', log: err })",
      "\t\treturn msg.dynamic(400, 101)",
      "\t}",
      "}",
    ]
  },
  "Shippo Controller Support Method": {
    "scope": "javascript",
    "prefix": "supportmethod",
    "body": [
      "/**",
      " * ${1:methodName} - ${2:description}",
      " * @param {null} _",
      " * @param {{ ${3:key: value} }} fields",
      " * @returns {{ status: number, message: string, responseCode: number$4 }}",
      " */",
      "static async $1 (_, fields, con) {",
      "\tlog({ filename: basename(__filename), method: '$1', action: 'request', log: fields })",
      "\n\t$LINE_COMMENT Check whether all the fields mentioned in the array are present in fields parameter",
      "\tconst validationResponse = Validator.validateFields(fields, [$5])",
      "\tif (validationResponse.status !== 200) return validationResponse",
      "\n\tconst tempConnection = !con",
      "const connection = con || await this.getConnection()",
      "\n\ttry {",
      "\t\t${0:$LINE_COMMENT Happy Coding...}",
      "\t} catch (err) {",
      "\t\tlog({ filename: basename(__filename), method: '$1', action: 'catch error', log: err })",
      "\t\treturn msg.dynamic(400, 101)",
      "\t} finally {",
      "\t\tif (tempConnection) connection.release()",
      "\t}",
      "}",
    ]
  },
  "Shippo Serverless handler - YAML": {
    "scope": "yaml",
    "prefix": "handler",
    "body": [
      "${1:handlerName}:",
      "handler: ./src/handlers/$1.$1",
      "events:",
      "\t- http:",
      "\t\tpath: /$1",
      "\t\tmethod: post",
      "\t\tcors: true"
    ]
  },
  "Shippo Serverless handler - JS": {
    "scope": "javascript",
    "prefix": "handler",
    "body": [
      "'use strict';",
      "\nconst handler = require('./handler')",
      "const schema = require('../grahql/schema/Shippo_${1:schemaFileName}')",
      "\nmodule.exports.${TM_FILENAME/(.*)\\..+$/$1/} = async (event) => {",
      "\tconst response = await handler(schema, event)",
      "\treturn response",
      "}\n"
    ]
  }
}